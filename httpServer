#!/usr/bin/env node

/**
 * Module dependencies.
 */

var debug = require('debug')('cache-proxy:server');
var http = require('http');
var prox = require('proxs');
var config = require('./configHelper');



var cacheDuration = "cache_config:cacheDuration";
var cacheSizeBytes = "cache_config:cacheSizeBytes";
var cacheSizeElements = "cache_config:cacheSizeElements";

var port = normalizePort(process.env.PORT || '8080');

var server = http.createServer(handleRequest);

function handleRequest(request , response){
  var startTime = new Date().getTime();
  prox.forwardRequest(request, config.getValue(cacheDuration), config.getValue(cacheSizeBytes), config.getValue(cacheSizeElements), function(data){
    var latency = new Date().getTime() - startTime;
    response.end('Data response: ' + data +"------ Total latency: " + latency +" ms");
  });


}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
